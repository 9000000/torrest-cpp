IMAGE_PREFIX = matrix37/torrest-cpp
IMAGE_TAG ?= latest
CROSS_COMPILER_TAG ?= latest
ROOT_DIR = $(abspath $(lastword $(MAKEFILE_LIST))/../..)
BUILD_DIR = build
BINARIES_DIR = $(BUILD_DIR)/binaries
VERSION ?= $(shell cut -s -d'"' -f2 "$(ROOT_DIR)/src/version.h")

ANDROID_PLATFORMS = android-arm android-arm64 android-x64 android-x86
DARWIN_PLATFORMS = darwin-x64
LINUX_PLATFORMS = linux-arm64 linux-armv7 linux-x64 linux-x86
WINDOWS_PLATFORMS = windows-x64 windows-x86

DEV_PLATFORMS = dev
RELEASE_PLATFORMS = $(ANDROID_PLATFORMS) $(DARWIN_PLATFORMS) $(LINUX_PLATFORMS) $(WINDOWS_PLATFORMS)
PLATFORMS = $(DEV_PLATFORMS) $(RELEASE_PLATFORMS)

BUILD_TARGET_PREFIX = build-
PULL_TARGET_PREFIX = pull-
PUSH_TARGET_PREFIX = push-
TORREST_TARGET_PREFIX = torrest-
LIBTORREST_TARGET_PREFIX = libtorrest-
ZIP_TORREST_TARGET_PREFIX = zip-torrest-
ZIP_LIBTORREST_TARGET_PREFIX = zip-libtorrest-

BUILD_TARGETS = $(addprefix $(BUILD_TARGET_PREFIX), $(PLATFORMS))
PULL_TARGETS = $(addprefix $(PULL_TARGET_PREFIX), $(PLATFORMS))
PUSH_TARGETS = $(addprefix $(PUSH_TARGET_PREFIX), $(PLATFORMS))
TORREST_TARGETS = $(addprefix $(TORREST_TARGET_PREFIX), $(PLATFORMS))
LIBTORREST_TARGETS = $(addprefix $(LIBTORREST_TARGET_PREFIX), $(PLATFORMS))
ZIP_TORREST_TARGETS = $(addprefix $(ZIP_TORREST_TARGET_PREFIX), $(PLATFORMS))
ZIP_LIBTORREST_TARGETS = $(addprefix $(ZIP_LIBTORREST_TARGET_PREFIX), $(PLATFORMS))

.PHONY: build pull push all torrest libtorrest zip zip-torrest zip-libtorrest clean \
	$(BUILD_TARGETS) $(PULL_TARGETS) $(PUSH_TARGETS) \
	$(TORREST_TARGETS) $(LIBTORREST_TARGETS) \
	$(ZIP_TORREST_TARGETS) $(ZIP_LIBTORREST_TARGETS)

# Helper targets for setting custom flags/options
TORREST_DEV_TARGETS = $(addprefix $(TORREST_TARGET_PREFIX), $(DEV_PLATFORMS))
TORREST_RELEASE_TARGETS = $(addprefix $(TORREST_TARGET_PREFIX), $(RELEASE_PLATFORMS))
TORREST_WINDOWS_TARGETS = $(addprefix $(TORREST_TARGET_PREFIX), $(WINDOWS_PLATFORMS))
TORREST_ANDROID_TARGETS = $(addprefix $(TORREST_TARGET_PREFIX), $(ANDROID_PLATFORMS))

LIBTORREST_DEV_TARGETS = $(addprefix $(LIBTORREST_TARGET_PREFIX), $(DEV_PLATFORMS))
LIBTORREST_RELEASE_TARGETS = $(addprefix $(LIBTORREST_TARGET_PREFIX), $(RELEASE_PLATFORMS))
LIBTORREST_WINDOWS_TARGETS = $(addprefix $(LIBTORREST_TARGET_PREFIX), $(WINDOWS_PLATFORMS))
LIBTORREST_ANDROID_TARGETS = $(addprefix $(LIBTORREST_TARGET_PREFIX), $(ANDROID_PLATFORMS))

build: $(BUILD_TARGETS)

$(BUILD_TARGETS): PLATFORM = $(@:$(BUILD_TARGET_PREFIX)%=%)
$(BUILD_TARGETS):
	docker build --pull \
		--tag "$(IMAGE_PREFIX)-$(PLATFORM):$(IMAGE_TAG)" \
		--build-arg CROSS_COMPILER_TAG="$(CROSS_COMPILER_TAG)" \
		--file "${ROOT_DIR}/docker/$(PLATFORM).Dockerfile" \
		"${ROOT_DIR}/scripts"

pull: $(PULL_TARGETS)

$(PULL_TARGETS): PLATFORM = $(@:$(PULL_TARGET_PREFIX)%=%)
$(PULL_TARGETS):
	docker pull "$(IMAGE_PREFIX)-$(PLATFORM):$(IMAGE_TAG)"

push: $(PUSH_TARGETS)

$(PUSH_TARGETS): PLATFORM = $(@:$(PUSH_TARGET_PREFIX)%=%)
$(PUSH_TARGETS):
	docker push "$(IMAGE_PREFIX)-$(PLATFORM):$(IMAGE_TAG)"

all: torrest libtorrest
torrest: $(TORREST_TARGETS)
libtorrest: $(LIBTORREST_TARGETS)

$(TORREST_TARGETS): PLATFORM = $(@:$(TORREST_TARGET_PREFIX)%=%)
$(TORREST_TARGETS): BUILD_TYPE = EXE
$(LIBTORREST_TARGETS): PLATFORM = $(@:$(LIBTORREST_TARGET_PREFIX)%=%)
$(LIBTORREST_TARGETS): BUILD_TYPE = SHARED
$(LIBTORREST_TARGETS): CMAKE_FLAGS += -Dbuild_library=ON

$(TORREST_DEV_TARGETS) $(LIBTORREST_DEV_TARGETS): CMAKE_FLAGS += -DCMAKE_BUILD_TYPE=Debug
$(TORREST_RELEASE_TARGETS) $(LIBTORREST_RELEASE_TARGETS): CMAKE_FLAGS += -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="$${CMAKE_TOOLCHAIN_FILE}" -DBoost_USE_STATIC_LIBS=ON -DOPENSSL_USE_STATIC_LIBS=ON
$(TORREST_WINDOWS_TARGETS) $(LIBTORREST_WINDOWS_TARGETS): CMAKE_FLAGS += -DCMAKE_$(BUILD_TYPE)_LINKER_FLAGS="-static-libgcc -static-libstdc++ -static"
$(TORREST_ANDROID_TARGETS) $(LIBTORREST_ANDROID_TARGETS): CMAKE_FLAGS += -DCMAKE_$(BUILD_TYPE)_LINKER_FLAGS="-static-libstdc++"

$(TORREST_TARGETS) $(LIBTORREST_TARGETS):
	mkdir -p "$(ROOT_DIR)/$(BUILD_DIR)/$(PLATFORM)" && \
	docker run --rm -u "$$(id -u):$$(id -g)" -v "$(ROOT_DIR):/workspace" -w "/workspace" \
		"$(IMAGE_PREFIX)-$(PLATFORM):$(IMAGE_TAG)" bash -c '\
			cmake -B /tmp/cmake-build -Dtarget_path="/workspace/$(BUILD_DIR)/$(PLATFORM)/" $(CMAKE_FLAGS) $(EXTRA_CMAKE_FLAGS) && \
			cmake --build /tmp/cmake-build --target torrest -- -j "$$(nproc)"'

zip: zip-torrest zip-libtorrest
zip-torrest: $(ZIP_TORREST_TARGETS)
zip-libtorrest: $(ZIP_LIBTORREST_TARGETS)

$(ZIP_TORREST_TARGETS): PLATFORM = $(@:$(ZIP_TORREST_TARGET_PREFIX)%=%)
$(ZIP_TORREST_TARGETS): NAME = torrest
$(ZIP_LIBTORREST_TARGETS): PLATFORM = $(@:$(ZIP_LIBTORREST_TARGET_PREFIX)%=%)
$(ZIP_LIBTORREST_TARGETS): NAME = libtorrest
$(ZIP_TORREST_TARGETS) $(ZIP_LIBTORREST_TARGETS):
	mkdir -p "$(ROOT_DIR)/$(BINARIES_DIR)" && \
	cd "$(ROOT_DIR)/$(BUILD_DIR)/$(PLATFORM)" && \
	zip -9 "$(ROOT_DIR)/$(BINARIES_DIR)/$(NAME).$(VERSION).$(subst -,_,$(PLATFORM)).zip" $(NAME)*

clean:
	rm -rf "$(ROOT_DIR)/$(BUILD_DIR)"
